name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        python manage.py test
        
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
        
    - name: Amazon ECR Login
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push django image to Amazon ECR
      id: build-image-django
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --tag $REGISTRY/todoapp-django-django:$IMAGE_TAG --target django .
        docker push $REGISTRY/todoapp-django-django:$IMAGE_TAG
        echo "image=$REGISTRY/todoapp-django-django:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Build, tag, and push webserver image to Amazon ECR
      id: build-image-webserver
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --tag $REGISTRY/todoapp-django-webserver:$IMAGE_TAG --target webserver .
        docker push $REGISTRY/todoapp-django-webserver:$IMAGE_TAG
        echo "image=$REGISTRY/todoapp-django-webserver:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
    - name: Amazon ECS Render Task Definition django
      id: task-def-django
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/task-definitions/todoapp-django-django.json
        container-name: todoapp-django-django
        image: ${{ steps.build-image-django.outputs.image }}
      
    - name: Amazon ECS Render Task Definition webserver
      id: task-def-webserver
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/task-definitions/todoapp-django-webserver.json
        container-name: todoapp-django-webserver
        image: ${{ steps.build-image-webserver.outputs.image }}
      
    - name: Amazon ECS Deploy Task Definition django
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-django.outputs.task-definition }}
        service: django
        cluster: main
        wait-for-service-stability: true
      
    - name: Amazon ECS Deploy Task Definition webserver
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-webserver.outputs.task-definition }}
        service: webserver
        cluster: main
        wait-for-service-stability: true
